/* 
§ Асинхронность 

Как использовать асинхронные средства с максимальной эффективностью?

*/


/* 

§ Цикл событий 


Движок js не работает в изоляции, он работает внутри управляющей среды (веб-браузер, nodejs). У управляющей среды есть механизм, который обеспечивает выполнение
нескольких фрагментов вашей программы обращаясь с вызовами к движку js в разные моменты времени. Этот механизм называется циклом событий.

Что-то выполняется сейчас, а что-то потом? Блоки кода - сейчас и блоки кода - потом.
Каждый раз когда вы упаковываете фрагмент кода в функцию и указываете, что она должна будет выполнена по некоторому событию (таймер, шелчок 
    мышью, ответ ajax и тд ). Вы в своем коде создаете блок потом, а следовательно вводите асинхронность в свою программу.


    ?У программы есть состояние, это значит, что переменным на данный момент времени присовены какие-то значения. Все блоки потом срабатывают после всех 
    ?блоков сейчас. А значит будут использовать состояние уже после синхронного кода.

    Асинхронность - управление промежутком между сейчас и потом.
    Параллелизм - одновременное выполнение операций.

    Параллелизм. Процессы и потоки (threads). Несколько потоков могут использовать общую память одного процесса.
    Цикл событий разбивает свою работу на задачи и выполняет их последовательно, что делает невозможным паралльельный доступ и изменения в общей памяти.

*/

// @ Пример 1, блоки сейчас и блоки потом. Чему могут быть равны a и b? (псевдо код)
/* var a = 1;
var b = 2;
function foo() {
    a++;
b = b * a;
a = b + 3; }
function bar() {
    b--;
a = 8 + b;
b = a * 2; }
// ajax(..) - произвольная функция Ajax из библиотеки
ajax( "http://some.url.1", foo );
ajax( "http://some.url.2", bar ); */

